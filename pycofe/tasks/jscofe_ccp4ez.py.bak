##!/usr/bin/python

#
# ============================================================================
#
#    18.01.18   <--  Date of Last Modification.
#                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ----------------------------------------------------------------------------
#
#  CCP4ez EXECUTABLE MODULE
#
#  Command-line:
#     ccp4-python -m pycofe.tasks.ccp4ez exeType jobDir jobId
#
#  where:
#    exeType  is either SHELL or SGE
#    jobDir   is path to job directory, having:
#      jobDir/output  : directory receiving output files with metadata of
#                       all successful imports
#      jobDir/report  : directory receiving HTML report
#
#  Copyright (C) Eugene Krissinel, Andrey Lebedev 2017-2018
#
# ============================================================================
#

#  python native imports
import os
import sys

#  ccp4-python imports
import pyrvapi
import pyrvapi_ext.parsers

#  application imports
import import_task


# ============================================================================
# Make CCP4ez driver

class CCP4ez(import_task.Import):

    def summary_page_id (self):  return "summary_page_id"

    # redefine name of input script file
    def file_stdin_path(self):  return "ccp4ez.script"

    # ------------------------------------------------------------------------

    def run(self):

        self.rvrow = 0
        self.putTitle ( "CCP4ez Automated Structure Solver: Data Import" )

        # -------------------------------------------------------------------
        # make summary tab

        pyrvapi.rvapi_insert_tab ( self.summary_page_id(),"Summary",
                                   self.report_page_id(),True )
        ipage_row = self.setReportWidget  ( self.summary_page_id() )
        self.putTitle ( "CCP4ez Automated Structure Solver" )

        # -------------------------------------------------------------------
        # import uploaded data

        spage_row = self.resetReportPage ( ipage_row )
        super ( CCP4ez,self ).import_all()
        ipage_row = self.setReportWidget  ( self.summary_page_id(),spage_row )

        # -------------------------------------------------------------------
        # fetch data for CCP4ez pipeline

        unm = None   # unmerged dataset
        hkl = None   # selected merged dataset
        seq = None   # list of sequence objects
        xyz = None   # coordinates (model/apo)

        if 'DataUnmerged' in self.outputDataBox.data:
            unm = self.outputDataBox.data['DataUnmerged'][0]

        if 'DataHKL' in self.outputDataBox.data:
            maxres = 10000.0
            for i in range(len(self.outputDataBox.data['DataHKL'])):
                res = self.outputDataBox.data['DataHKL'][i].getHighResolution(True)
                if res<maxres:
                    maxres = res
                    hkl    = self.outputDataBox.data['DataHKL'][i]

        if 'DataSequence' in self.outputDataBox.data:
            seq = self.outputDataBox.data['DataSequence']

        if 'DataXYZ' in self.outputDataBox.data:
            xyz = self.outputDataBox.data['DataXYZ'][0]


        # -------------------------------------------------------------------
        # make data summary table

        tableId = "ccp4ez_summary_table"

        self.putTable ( tableId,"<font size='+1'>Selected Input Data</font>",
                                self.summary_page_id(),self.rvrow,0 )
        self.setTableHorzHeaders ( tableId,["Assigned Name","View"],
                ["Name of the assocuated data object","Data view and export"] )

        def addDataLine ( name,tooltip,object,nrow ):
            if object:
                self.putTableLine ( tableId,name,tooltip,object.dname,nrow[0] )
                self.putInspectButton ( object,"View",tableId,nrow[0]+1,2 )
                nrow[0] +=1
            return

        nrow = [0]
        addDataLine ( "Unmerged Reflections","Reflection data"    ,unm,nrow )
        addDataLine ( "Merged Reflections"  ,"Reflection data"    ,hkl,nrow )
        if len(seq)<2:
            addDataLine ( "Sequence"        ,"Sequence data"   ,seq[0],nrow )
        else:
            for i in range(len(seq)):
                addDataLine ( "Sequence #"+str(i+1),"Sequence data",seq[i],nrow )
        addDataLine ( "Structure"           ,"Homologue structure",xyz,nrow )

        if self.task.ha_type:
            self.putTableLine ( tableId,"Anomalous scatterers",
                "Chemical type of anomalous scatterers",self.task.ha_type,
                nrow[0] )
            nrow[0] += 1

        # close execution logs and quit
        self.success()
        return


# ============================================================================

if __name__ == "__main__":

    drv = CCP4ez ( "",os.path.basename(__file__),
                  { "report_page" : { "show" : True, "name" : "Data Import" },
                    "nav_tree"    : { "id"   : "nav_tree_id", "name" : "Workflow" }
                  })

    drv.run()
